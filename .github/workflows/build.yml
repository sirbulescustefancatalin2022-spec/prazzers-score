name: Build Android APK (Buildozer - native Ubuntu)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-v1-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Buildozer/.buildozer
        uses: actions/cache@v4
        with:
          path: |
            .buildozer
            ~/.buildozer
          key: ${{ runner.os }}-buildozer-v1-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-buildozer-

      - name: System deps (native)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            zip unzip git libffi-dev libssl-dev \
            liblzo2-dev liblzma-dev zlib1g-dev \
            autoconf automake libtool pkg-config \
            libjpeg-dev libfreetype6-dev

      - name: Install Buildozer & tools
        run: |
          python -m pip install --upgrade pip wheel
          pip install "setuptools==69.5.1"
          pip install "Cython==0.29.36" "buildozer==1.5.0" "python-for-android==2024.1.21"
          python -m buildozer --version
          python - << 'PY'
import importlib
m = importlib.import_module("p4a")
print("python-for-android:", getattr(m, "__version__", "unknown"))
PY

      - name: Set up JDK 17 (required by AGP/Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Force NDK r25b for p4a
        run: |
          echo "ANDROID_NDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV

      - name: Tweak buildozer.spec (API 33, verbose, AndroidX)
        run: |
          test -f buildozer.spec
          # log_level = 2
          sed -i 's/^#\? *log_level *= *.*/log_level = 2/' buildozer.spec
          # enforce android.api = 33
          if grep -qi '^android\.api' buildozer.spec; then
            sed -i 's/^android\.api.*/android.api = 33/i' buildozer.spec
          else
            printf "\nandroid.api = 33\n" >> buildozer.spec
          fi
          # enforce android.minapi = 21
          if grep -qi '^android\.minapi' buildozer.spec; then
            sed -i 's/^android\.minapi.*/android.minapi = 21/i' buildozer.spec
          else
            printf "android.minapi = 21\n" >> buildozer.spec
          fi
          # enable AndroidX
          if grep -qi '^android\.enable_androidx' buildozer.spec; then
            sed -i 's/^android\.enable_androidx.*/android.enable_androidx = True/i' buildozer.spec
          else
            printf "android.enable_androidx = True\n" >> buildozer.spec
          fi
          # optional: pin NDK in spec if field exists
          if grep -qi '^android\.ndk' buildozer.spec; then
            sed -i 's/^android\.ndk.*/android.ndk = 25b/i' buildozer.spec
          else
            printf "android.ndk = 25b\n" >> buildozer.spec
          fi
          # give Gradle more RAM and full logs
          echo "GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs='-Xmx4g' -Dkotlin.daemon.useFallbackStrategy=true" >> $GITHUB_ENV
          # add gradle arguments for more info on failures
          if grep -qi '^android\.gradle_arguments' buildozer.spec; then
            sed -i 's/^android\.gradle_arguments.*/android.gradle_arguments = --info --stacktrace/i' buildozer.spec
          else
            printf "android.gradle_arguments = --info --stacktrace\n" >> buildozer.spec
          fi

      - name: Build APK (debug)
        env:
          ANDROIDSDK: ${{ env.ANDROIDSDK }}
        run: |
          python -m buildozer -v android debug

      - name: Find APKs
        id: findapk
        run: |
          shopt -s globstar nullglob
          FILES=()
          FILES+=(.buildozer/android/platform/build-*/dists/*/build/outputs/apk/debug/*-debug*.apk)
          FILES+=(.buildozer/android/platform/build-*/dists/*/bin/*.apk)
          FILES+=(bin/*.apk)
          printf "%s\n" "${FILES[@]}" > apk_list.txt
          if [ ! -s apk_list.txt ]; then
            echo "No APK found" >&2
            exit 1
          fi
          echo "count=$(wc -l < apk_list.txt)" >> $GITHUB_OUTPUT

      - name: Upload APK(s)
        uses: actions/upload-artifact@v4
        with:
          name: Prazzers-Score-APK
          path: |
            apk_list.txt
            .buildozer/android/platform/build-*/dists/*/build/outputs/apk/debug/*-debug*.apk
            .buildozer/android/platform/build-*/dists/*/bin/*.apk
            bin/*.apk
          if-no-files-found: error

      # Dacă build-ul pică, urcă logurile utile ca artifact
      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .buildozer/android/platform/build-*/dists/*/gradle/wrapper/gradle-wrapper.properties
            .buildozer/android/platform/build-*/dists/*/.gradle/**/*.*
            .buildozer/android/platform/build-*/dists/*/build/**/*.log
            .buildozer/android/platform/*.log
            .buildozer/**/*.txt
          if-no-files-found: warn
